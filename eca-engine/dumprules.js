// Generated by CoffeeScript 1.7.1
(function() {
  var db, dbid, fProcessUsersRuleIDs, fs, redis;

  fs = require('fs');

  redis = require('redis');

  db = redis.createClient(6379, 'localhost', {
    connect_timeout: 2000
  });

  dbid = process.argv[2] || 0;

  db.select(dbid);

  fProcessUsersRuleIDs = function(err, user, obj) {
    var arrRules, fFetchUserRule, oRules, rulename, semaphore, _results;
    if (!user) {
      return console.log('No users found!');
    } else if (err) {
      return console.log('Error fetching ' + user);
    } else {
      console.log(obj);
      semaphore = 0;
      oRules = {};
      _results = [];
      for (user in obj) {
        arrRules = obj[user];
        oRules[user] = {};
        semaphore += arrRules.length;
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = arrRules.length; _i < _len; _i++) {
            rulename = arrRules[_i];
            fFetchUserRule = function(user, rulename) {
              return function(err, obj) {
                if (obj) {
                  oRules[user][rulename] = obj;
                }
                if (--semaphore === 0) {
                  fs.appendFile("rules_dump_db_" + dbid + ".txt", JSON.stringify(oRules));
                  db.quit();
                  return console.log('Done');
                }
              };
            };
            _results1.push(db.get("user:" + user + ":rule:" + rulename, fFetchUserRule(user, rulename)));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  console.log('Fetching all rules from all users in DB');

  db.smembers('users', (function(_this) {
    return function(err, obj) {
      var fProcessAnswer, result, semaphore, user, _i, _len, _results;
      result = {};
      if (obj.length === 0) {
        return fProcessUsersRuleIDs(null, null, result);
      } else {
        semaphore = obj.length;
        _results = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          user = obj[_i];
          console.log('Fetching user ' + user);
          fProcessAnswer = function(user) {
            return (function(_this) {
              return function(err, obj) {
                if (obj.length > 0) {
                  result[user] = obj;
                }
                if (--semaphore === 0) {
                  return fProcessUsersRuleIDs(null, user, result);
                }
              };
            })(this);
          };
          _results.push(db.smembers("user:" + user + ":rules", fProcessAnswer(user)));
        }
        return _results;
      }
    };
  })(this));

}).call(this);
